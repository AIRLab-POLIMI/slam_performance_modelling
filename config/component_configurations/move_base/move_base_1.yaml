## move_base
# http://wiki.ros.org/move_base#Parameters
base_local_planner: base_local_planner/TrajectoryPlannerROS  # The name of the plugin for the global planner to use with move_base, see pluginlib documentation for more details on plugins. This plugin must adhere to the nav_core::BaseGlobalPlanner interface specified in the nav_core package.
base_global_planner: global_planner/GlobalPlanner  # The name of the plugin for the local planner to use with move_base see pluginlib documentation for more details on plugins. This plugin must adhere to the nav_core::BaseLocalPlanner interface specified in the nav_core package.

controller_frequency: 20.0  # default: 20.0  # The rate in Hz at which to run the control loop and send velocity commands to the base.
planner_frequency: 0.2  # default: 0.0  # The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked.
max_replanning_tries: 3  # default: -1  # How many times to allow for planning retries before executing recovery behaviors. A value of -1.0 corresponds to an infinite retries.
planner_patience: 5.0  # default: 5.0  # How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.
controller_patience: 15.0  # default: 15.0  # How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.

clearing_rotation_allowed: false  # default: true  # Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space. Note: This parameter is only used when the default recovery behaviors are in use, meaning the user has not set the recovery_behaviors parameter to anything custom.
recovery_behavior_enabled: true  # default: true  # Whether or not to enable the move_base recovery behaviors to attempt to clear out space.
recovery_behaviors:  # A list of recovery behavior plugins to use with move_base, see pluginlib documentation for more details on plugins. These behaviors will be run when move_base fails to find a valid plan in the order that they are specified. After each behavior completes, move_base will attempt to make a plan. If planning is successful, move_base will continue normal operation. Otherwise, the next recovery behavior in the list will be executed. These plugins must adhere to the nav_core::RecoveryBehavior interface specified in the nav_core package.
  - {name: aggressive_clearance, type: clear_costmap_recovery/ClearCostmapRecovery}

aggressive_clearance:  # http://wiki.ros.org/clear_costmap_recovery#ROS_Parameters
  reset_distance: 0.0  # default: 3.0  # The length of the side of a square centered on the robot pose, *outside* which obstacles will be removed from the costmaps when they are reverted to the static map.

shutdown_costmaps: false  # default: false  # Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state
oscillation_timeout: 0.0  # default: 0.0  # How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout.
oscillation_distance: 0.5  # default: 0.5  # How far in meters the robot must move to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout


## Local costmap configuration
# http://wiki.ros.org/costmap_2d#Parameters
local_costmap:
  global_frame: map
  robot_base_frame: base_link

  transform_tolerance: 0.15  # default: 0.2  # Specifies the delay in transform (tf) data that is tolerable in seconds. This parameter serves as a safeguard to losing a link in the tf tree while still allowing an amount of latency the user is comfortable with to exist in the system. For example, a transform being 0.2 seconds out-of-date may be tolerable, but a transform being 8 seconds out of date is not. If the tf transform between the coordinate frames specified by the global_frame and robot_base_frame parameters is transform_tolerance seconds older than ros::Time::now(), then the navigation stack will stop the robot.
  update_frequency: 2  # default: 5.0  # The frequency in Hz for the map to be updated.
  publish_frequency: 0.2  # default: 0.0  # The frequency in Hz for the map to be publish display information.

  rolling_window: true  # default: false  # Whether or not to use a rolling window version of the costmap. If the static_map parameter is set to true, this parameter must be set to false.
  always_send_full_costmap: false  # default: false  # If true the full costmap is published to "~<name>/costmap" every update. If false only the part of the costmap that has changed is published on the "~<name>/costmap_updates" topic.
  width: 6  # default: 10 (int)  # The width of the map in meters.
  height: 6  # default: 10 (int)  # The height of the map in meters.
  resolution: 0.02  # default: 0.05 TODO check  # The resolution of the map in meters/cell.

  track_unknown_space: true  # default: true  # If true, unknown values in the map messages are translated directly to the layer. Otherwise, unknown values in the map message are translated as FREE_SPACE in the layer.
  unknown_cost_value: 255  # default: -1  # The value for which a cost should be considered unknown when reading in a map from the map server. If the costmap is not tracking unknown space, costs of this value will be considered occupied. A value of zero also results in this parameter being unused.

  footprint: [ [-0.2,-0.2], [0.2, -0.2], [0.2, 0.2], [-0.2,0.2] ]
  footprint_padding: 0.0

  plugins:  # Sequence of plugin specifications, one per layer. Each specification is a dictionary with name and type fields.
    - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
    - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

  obstacle_layer:  # http://wiki.ros.org/costmap_2d/hydro/obstacles#Global_Filtering_Parameters
    enabled: true
    max_obstacle_height: 0.6  # The maximum height of any obstacle to be inserted into the costmap in meters. This parameter should be set to be slightly higher than the height of your robot.
    obstacle_range: 30.0  # default: 2.5  # The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters. This can be over-ridden on a per-sensor basis.
    raytrace_range: 30.0  # default: 3.0  # The default range in meters at which to raytrace out obstacles from the map using sensor data. This can be over-ridden on a per-sensor basis.
    observation_sources: base_scan  # http://wiki.ros.org/costmap_2d/hydro/obstacles#Sensor_management_parameters
    base_scan:
      data_type: LaserScan
      topic: /base_scan
      sensor_frame: base_laser_link
      expected_update_rate: 0.4  # How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings. This parameter is used as a failsafe to keep the navigation stack from commanding the robot when a sensor has failed. It should be set to a value that is slightly more permissive than the actual rate of the sensor. For example, if we expect a scan from a laser every 0.05 seconds we might set this parameter to be 0.1 seconds to give a generous buffer and account for some amount of system latency.
      clearing: true  # default: false  # Whether or not this observation should be used to clear out freespace.
      marking: true  # default: true  # Whether or not this observation should be used to mark obstacles.

  inflation_layer:  # http://wiki.ros.org/costmap_2d/hydro/inflation#Parameters
    enabled: true
    cost_scaling_factor: 7.5 # default: 10  # A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle: exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values.
    inflation_radius: 0.3 # default: 0.55  # The radius in meters to which the map inflates obstacle cost values.

## local planner configuration
# http://wiki.ros.org/base_local_planner#Parameters
TrajectoryPlannerROS:
  acc_lim_x: 1.5 # default: 2.5  # The x acceleration limit of the robot in meters/sec^2
  acc_lim_y: 1.5 # default: 2.5  # The y acceleration limit of the robot in meters/sec^2
  acc_lim_theta: 2.5  # default: 3.2  # The rotational acceleration limit of the robot in radians/sec^2

  max_vel_x: 0.85  # default: 0.5  # The maximum forward velocity allowed for the base in meters/sec
  min_vel_x: 0.05 # default: 0.1  # NOTE: min_vel_x MUST be positive (cannot be zero) to work with TrajectoryPlannerROS, can be negative with DWA  # The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction.

  max_vel_theta: 0.7  # default: 1.0  # The maximum rotational velocity allowed for the base in radians/sec
  min_vel_theta: -0.7  # default: -1.0  # The minimum rotational velocity allowed for the base in radians/sec
  min_in_place_vel_theta: 0.4  # default: 0.4  # NOTE: the name min_in_place_rotational_vel was deprecated in previous ROS releases  # The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec

  escape_vel: -0.1  # default: -0.1  # NOTE: the name min_in_place_rotational_vel was deprecated in previous ROS releases  # Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape.
  escape_reset_dist: 0.15  # Not found in the documentation
  escape_reset_theta: 0.15  # Not found in the documentation

  holonomic_robot: false  # default: true  # Determines whether velocity commands are generated for a holonomic or non-holonomic robot. For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing velocity commands will be issued.

  yaw_goal_tolerance: 0.2  # default: 0.05  # The tolerance in radians for the controller in yaw/rotation when achieving its goal
  xy_goal_tolerance: 0.3  # default: 0.10  # The tolerance in meters for the controller in the x & y distance when achieving a goal
  latch_xy_goal_tolerance: false  # default: false  # If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.

  sim_time: 1.5  # default: 1.0  # The amount of time to forward-simulate trajectories in seconds
  sim_granularity: 0.025  # default: 0.025  # The step size, in meters, to take between points on a given trajectory
  vx_samples: 10  # default: 3  # The number of samples to use when exploring the x velocity space
  vtheta_samples: 20  # default: 20  # The number of samples to use when exploring the theta velocity space

  meter_scoring: true  # default: false TODO check  # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default.
  pdist_scale: 0.6  # default: 0.6  # The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
  gdist_scale: 0.8  # default: 0.8  # The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
  occdist_scale: 0.05  # default: 0.01  # The weighting for how much the controller should attempt to avoid obstacles

  oscillation_reset_dist: 0.25  # default: 0.05  # How far the robot must travel in meters before oscillation flags are reset
  oscillation_reset_timeout: 10.0  # Not found in the documentation
  prune_plan: false  # default: true TODO check  # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.

  dwa: true  # default: true  # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout, but we recommend trying DWA first.)


## global costmap configuration
  # http://wiki.ros.org/costmap_2d#Parameters
global_costmap:
  global_frame: map
  robot_base_frame: base_link

  transform_tolerance: 0.25  # default: 0.2  # Specifies the delay in transform (tf) data that is tolerable in seconds. This parameter serves as a safeguard to losing a link in the tf tree while still allowing an amount of latency the user is comfortable with to exist in the system. For example, a transform being 0.2 seconds out-of-date may be tolerable, but a transform being 8 seconds out of date is not. If the tf transform between the coordinate frames specified by the global_frame and robot_base_frame parameters is transform_tolerance seconds older than ros::Time::now(), then the navigation stack will stop the robot.
  update_frequency: 2  # default: 5.0  # The frequency in Hz for the map to be updated.
  publish_frequency: 0.1  # default: 0.0  # The frequency in Hz for the map to be publish display information.
  rolling_window: true  # default: false  # Whether or not to use a rolling window version of the costmap. If the static_map parameter is set to true, this parameter must be set to false.

  always_send_full_costmap: false  # default: false  # If true the full costmap is published to "~<name>/costmap" every update. If false only the part of the costmap that has changed is published on the "~<name>/costmap_updates" topic.
  width: 100  # default: 10 (int)  # The width of the map in meters.
  height: 100  # default: 10 (int)  # The height of the map in meters.
  resolution: 0.05  # default: 0.05  # The resolution of the map in meters/cell.

  footprint: [ [-0.2,-0.2], [0.2, -0.2], [0.2, 0.2], [-0.2,0.2] ]
  footprint_padding: 0.0

  plugins:  # Sequence of plugin specifications, one per layer. Each specification is a dictionary with name and type fields.
    - {name: static_layer, type: "costmap_2d::StaticLayer"}
    - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
    - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

  static_layer:  # http://wiki.ros.org/costmap_2d/hydro/staticmap#Parameters
    enabled: true
    map_topic: /map
    subscribe_to_updates: true  # default: false  # In addition to map_topic, also subscribe to map_topic + "_updates"
    track_unknown_space: false  # default: true  # If true, unknown values in the map messages are translated directly to the layer. Otherwise, unknown values in the map message are translated as FREE_SPACE in the layer.
    unknown_cost_value: -1  # default: -1  # The value for which a cost should be considered unknown when reading in a map from the map server. If the costmap is not tracking unknown space, costs of this value will be considered occupied. A value of zero also results in this parameter being unused.

  obstacle_layer:  # http://wiki.ros.org/costmap_2d/hydro/obstacles#Global_Filtering_Parameters
    enabled: true
    max_obstacle_height: 0.6  # default: 2.0  # The maximum height of any obstacle to be inserted into the costmap in meters. This parameter should be set to be slightly higher than the height of your robot.
    min_obstacle_height: 0.0
    obstacle_range: 30.0  # default: 2.5  # The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters. This can be over-ridden on a per-sensor basis.
    raytrace_range: 30.0  # default: 3.0  # The default range in meters at which to raytrace out obstacles from the map using sensor data. This can be over-ridden on a per-sensor basis.
    observation_sources: base_scan  # http://wiki.ros.org/costmap_2d/hydro/obstacles#Sensor_management_parameters
    base_scan:
      data_type: LaserScan
      sensor_frame: base_laser_link
      topic: /base_scan
      expected_update_rate: 0.4  # default: 0.0  # How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings. This parameter is used as a failsafe to keep the navigation stack from commanding the robot when a sensor has failed. It should be set to a value that is slightly more permissive than the actual rate of the sensor. For example, if we expect a scan from a laser every 0.05 seconds we might set this parameter to be 0.1 seconds to give a generous buffer and account for some amount of system latency.
      clearing: true  # default: false  # Whether or not this observation should be used to clear out freespace.
      marking: true  # default: true  # Whether or not this observation should be used to mark obstacles.

  inflation_layer:  # http://wiki.ros.org/costmap_2d/hydro/inflation#Parameters
    enabled: true
    cost_scaling_factor: 7.5 # default: 10  # A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle: exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values.
    inflation_radius: 2.25 # default: 0.55  # The radius in meters to which the map inflates obstacle cost values.

## global planner configuration
# http://wiki.ros.org/global_planner#Parameters
GlobalPlanner:
  allow_unknown: true  # default: true  # Specifies whether or not to allow the planner to create plans that traverse unknown space. NOTE: if you are using a layered costmap_2d costmap with a voxel or obstacle layer, you must also set the track_unknown_space param for that layer to be true, or it will convert all your unknown space to free space (which planner will then happily go right through).
  default_tolerance: 0.0  # default: 0.0  # A tolerance on the goal point for the planner. The planner will attempt to create a plan that is as close to the specified goal as possible but no further than default_tolerance away.
  use_dijkstra: true   # default: true  # If true, use dijkstra's algorithm. Otherwise, A*.
  use_quadratic: true  # default: true  # If true, use the quadratic approximation of the potential. Otherwise, use a simpler calculation.
  use_grid_path: false  # default: false  # If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method.
  old_navfn_behavior: false  # default: false TODO check it was true in predictive_benchmarking # If for some reason, you want global_planner to exactly mirror the behavior of navfn, set this to true (and use the defaults for the other boolean parameters)
  lethal_cost: 253  # default: 253  # Lethal Cost (dynamic reconfigure)
  neutral_cost: 50  # default: 50  # Neutral Cost (dynamic reconfigure)
  cost_factor: 3.0  # default: 3.  # Factor to multiply each cost from costmap by (dynamic reconfigure)
  publish_potential: true  # default: true  # Publish Potential Costmap (dynamic reconfigure)
  orientation_mode: 0  # default: 0  # How to set the orientation of each point (None=0, Forward=1, Interpolate=2, ForwardThenInterpolate=3, Backward=4, Leftward=5, Rightward=6) (dynamic reconfigure)
  orientation_window_size: 1  # default: 1  # What window to use to determine the orientation based on the position derivative specified by the orientation mode (dynamic reconfigure)
